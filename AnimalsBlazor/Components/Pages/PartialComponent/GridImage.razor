@page "/list"
@page "/list/{id}"

@using AnimalsBlazor.Components.Pages.PartialComponent
@using AnimalsBlazor.Services

@inject IAnimalService AnimalService
@inject IDialogService DialogService

@rendermode InteractiveServer

<MudToolBar class="d-flex my-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Escolha sua imagem:</MudText>
    <MudSpacer />
    <MudIconButton OnClick="CarregarImagens" Class="ma-0" Icon="@Icons.Material.Filled.RestartAlt" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large"/>
</MudToolBar>


@if (isLoading)
{
    <MudGrid Justify="Justify.Center" Class="mt-6">
        <MudItem xs="12" class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Spacing="10" Justify="Justify.Center">
        @foreach (var imagem in Imagens)
        {
            <MudItem>
                <MudPaper Height="140px" Width="140px">
                    <MudButton OnClick="@(() => OpenDialogAsync(imagem))" Style="padding: 0">
                        <MudImage Src="@imagem" Height="140" Width="140" Alt="Random Dog" Elevation="25" Class="rounded-lg" />
                    </MudButton>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

<style>
    .my-custom-class {
    backdrop-filter: blur(10px);
    }
</style>

@code {

    [Parameter]
    public string? Id { get; set; }


    private List<string> Imagens = new();
    public int cont = 24;
    private string? Imagem;
    private bool isLoading = false;

    private Dictionary<string, Func<Task<string>>> _animalImageLoaders = new();

    protected override async Task OnInitializedAsync()
    {
        _animalImageLoaders = new Dictionary<string, Func<Task<string>>>(StringComparer.OrdinalIgnoreCase)
    {
        { "dog", () => AnimalService.GetRandomDogImageAsync() }
    };

        isLoading = true;
        await CarregarImagens();
        isLoading = false;
    }

    private async Task CarregarImagens()
    {
        isLoading = true;
        Imagens.Clear();
        var tipo = Id;

        if (string.IsNullOrWhiteSpace(tipo) || !_animalImageLoaders.ContainsKey(tipo))
        {
            tipo = "dog";
        }

        var getImagem = _animalImageLoaders[tipo];

        for (int i = 0; i < cont; i++)
        {
            var imagem = await getImagem();
            {
                Imagens.Add(imagem!);
            }
        }

        isLoading = false;
    }

    private Task OpenDialogAsync(string imagem)
    {
        var parameters = new DialogParameters { ["Imagem"] = imagem };

        var options = new DialogOptions { BackgroundClass = "my-custom-class",};

        return DialogService.ShowAsync<ImageDialog>("Deseja baixar essa imagem?", parameters, options);
    }
}